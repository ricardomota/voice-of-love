/**
 * ServiÃ§o para anÃ¡lise de transcriÃ§Ãµes de Ã¡udio
 * Extrai caracterÃ­sticas de personalidade, frases comuns e estilos de fala
 */

export const transcriptionAnalysisService = {
  /**
   * Extrai frases caracterÃ­sticas da transcriÃ§Ã£o
   */
  extractCharacteristicPhrases(text: string): string[] {
    const phrases: string[] = [];
    const lowerText = text.toLowerCase();
    
    // PadrÃµes expandidos para capturar mais expressÃµes caracterÃ­sticas
    const patterns = [
      // Cumprimentos e saudaÃ§Ãµes
      /\b(oi|olÃ¡|e aÃ­|eae|fala|beleza|bom dia|boa tarde|boa noite|paz|salve)\b/gi,
      // Despedidas
      /\b(tchau|atÃ©|falou|abraÃ§o|beijo|fique bem|atÃ© mais|atÃ© logo|vai com deus)\b/gi,
      // ExpressÃµes de surpresa/emoÃ§Ã£o
      /\b(nossa|meu deus|caramba|puxa|nossa senhora|ai meu deus|santa maria|jesus)\b/gi,
      // ConfirmaÃ§Ãµes e concordÃ¢ncias
      /\b(nÃ©|nÃ£o Ã©|sabe|entende|viu|certo|exato|isso mesmo|claro|Ã³bvio)\b/gi,
      // Tratamentos carinhosos
      /\b(meu filho|minha filha|filho|filha|querido|querida|amor|benzinho|coraÃ§Ã£o)\b/gi,
      // ExpressÃµes regionais/caracterÃ­sticas
      /\b(uai|sÃ´|oxe|trem|negÃ³cio|bagulho|parada|massa|legal|bacana)\b/gi,
      // Frases completas comuns
      /(como vocÃª estÃ¡|tudo bem|que bom|que legal|imagina sÃ³|pode crer|sem dÃºvida)/gi,
      // ExpressÃµes de carinho/preocupaÃ§Ã£o
      /(se cuida|fica bem|com cuidado|deus te abenÃ§oe|que deus te proteja)/gi
    ];
    
    patterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const cleanMatch = match.trim();
          if (cleanMatch.length > 2 && !phrases.includes(cleanMatch)) {
            phrases.push(cleanMatch);
          }
        });
      }
    });
    
    // TambÃ©m extrair frases mais longas e caracterÃ­sticas
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
    sentences.forEach(sentence => {
      const trimmed = sentence.trim();
      // Procurar por frases que contenham palavras-chave emocionais
      if ((trimmed.includes('sempre') || trimmed.includes('lembro') || 
           trimmed.includes('amor') || trimmed.includes('saudade') ||
           trimmed.includes('orgulho') || trimmed.includes('feliz')) &&
          trimmed.length < 100) {
        phrases.push(trimmed);
      }
    });
    
    return phrases.slice(0, 8); // MÃ¡ximo 8 frases
  },

  /**
   * Analisa estilo de fala e retorna caracterÃ­sticas
   */
  analyzeSpeechStyle(text: string): string {
    const lowerText = text.toLowerCase();
    
    // Detectar formalidade
    if (lowerText.includes('senhor') || lowerText.includes('senhora') || 
        lowerText.includes('vossa') || lowerText.includes('pois nÃ£o') ||
        lowerText.includes('com licenÃ§a') || lowerText.includes('por favor') ||
        lowerText.includes('muito obrigado')) {
      return 'formal';
    }
    
    // Detectar informalidade jovem
    if (lowerText.includes('cara') || lowerText.includes('mano') || 
        lowerText.includes('vÃ©i') || lowerText.includes('brother') ||
        lowerText.includes('galera') || lowerText.includes('pessoal')) {
      return 'informal';
    }
    
    // Detectar carinho maternal/paternal
    if (lowerText.includes('amor') || lowerText.includes('querido') || 
        lowerText.includes('meu bem') || lowerText.includes('benzinho') ||
        lowerText.includes('coraÃ§Ã£o') || lowerText.includes('meu filho') ||
        lowerText.includes('minha filha')) {
      return 'carinhoso';
    }
    
    // Detectar storytelling/narrativo
    if (lowerText.includes('era uma vez') || lowerText.includes('aconteceu') || 
        lowerText.includes('lembro que') || lowerText.includes('uma vez') ||
        lowerText.includes('vocÃª sabe que') || lowerText.includes('deixa eu te contar')) {
      return 'storyteller';
    }
    
    // Detectar estilo motivacional/conselheiro
    if (lowerText.includes('sempre digo') || lowerText.includes('acredite') ||
        lowerText.includes('nunca desista') || lowerText.includes('tenha fÃ©') ||
        lowerText.includes('vocÃª consegue') || lowerText.includes('forÃ§a')) {
      return 'motivacional';
    }
    
    // Detectar humor/brincalhÃ£o
    if (lowerText.includes('haha') || lowerText.includes('rsrs') ||
        lowerText.includes('que engraÃ§ado') || lowerText.includes('brincadeira') ||
        lowerText.includes('piada') || text.includes('ðŸ˜‚') || text.includes('ðŸ˜„')) {
      return 'brincalhÃ£o';
    }
    
    return 'natural'; // PadrÃ£o
  },

  /**
   * Extrai traÃ§os de personalidade da transcriÃ§Ã£o
   */
  extractPersonalityTraits(text: string): string[] {
    const traits: string[] = [];
    const lowerText = text.toLowerCase();
    
    // Detectar religiosidade
    if (lowerText.includes('deus') || lowerText.includes('jesus') || 
        lowerText.includes('oraÃ§Ã£o') || lowerText.includes('igreja') ||
        lowerText.includes('fÃ©') || lowerText.includes('abenÃ§oe')) {
      traits.push('Religioso(a)');
    }
    
    // Detectar otimismo
    if (lowerText.includes('sempre bom') || lowerText.includes('tudo vai dar certo') ||
        lowerText.includes('positivo') || lowerText.includes('esperanÃ§a') ||
        lowerText.includes('vai ficar bem')) {
      traits.push('Otimista');
    }
    
    // Detectar preocupaÃ§Ã£o/cuidado
    if (lowerText.includes('se cuida') || lowerText.includes('cuidado') ||
        lowerText.includes('preocupo') || lowerText.includes('atenÃ§Ã£o') ||
        lowerText.includes('tem cuidado')) {
      traits.push('Cuidadoso(a)');
    }
    
    // Detectar sabedoria/experiÃªncia
    if (lowerText.includes('experiÃªncia') || lowerText.includes('aprendi') ||
        lowerText.includes('vida ensina') || lowerText.includes('com o tempo') ||
        lowerText.includes('jÃ¡ vi muito')) {
      traits.push('SÃ¡bio(a)');
    }
    
    // Detectar carinho familiar
    if (lowerText.includes('famÃ­lia') || lowerText.includes('filhos') ||
        lowerText.includes('netos') || lowerText.includes('casa') ||
        lowerText.includes('lar')) {
      traits.push('Familiar');
    }
    
    return traits;
  },

  /**
   * Extrai valores e tÃ³picos favoritos
   */
  extractValuesAndTopics(text: string): { values: string[], topics: string[] } {
    const lowerText = text.toLowerCase();
    const values: string[] = [];
    const topics: string[] = [];
    
    // Valores detectados
    if (lowerText.includes('honestidade') || lowerText.includes('verdade') ||
        lowerText.includes('honesto') || lowerText.includes('sincero')) {
      values.push('Honestidade');
    }
    if (lowerText.includes('famÃ­lia') || lowerText.includes('unidos') ||
        lowerText.includes('juntos') || lowerText.includes('parentes')) {
      values.push('FamÃ­lia');
    }
    if (lowerText.includes('trabalho') || lowerText.includes('esforÃ§o') ||
        lowerText.includes('dedicaÃ§Ã£o') || lowerText.includes('batalha')) {
      values.push('Trabalho');
    }
    if (lowerText.includes('estudar') || lowerText.includes('aprender') ||
        lowerText.includes('conhecimento') || lowerText.includes('escola')) {
      values.push('EducaÃ§Ã£o');
    }
    
    // TÃ³picos favoritos detectados
    if (lowerText.includes('comida') || lowerText.includes('cozinha') ||
        lowerText.includes('receita') || lowerText.includes('cozinhar')) {
      topics.push('CulinÃ¡ria');
    }
    if (lowerText.includes('viagem') || lowerText.includes('lugar') ||
        lowerText.includes('cidade') || lowerText.includes('passear')) {
      topics.push('Viagens');
    }
    if (lowerText.includes('mÃºsica') || lowerText.includes('cantar') ||
        lowerText.includes('canÃ§Ã£o') || lowerText.includes('rÃ¡dio')) {
      topics.push('MÃºsica');
    }
    if (lowerText.includes('saÃºde') || lowerText.includes('mÃ©dico') ||
        lowerText.includes('remÃ©dio') || lowerText.includes('exercÃ­cio')) {
      topics.push('SaÃºde');
    }
    
    return { values, topics };
  },

  /**
   * Determina gÃªnero baseado no relacionamento
   */
  getGender(relationship: string): 'male' | 'female' | 'neutral' {
    const masculineRelationships = [
      'pai', 'papai', 'paizinho', 'padrasto', 'vovÃ´', 'avÃ´', 'vovozinho', 
      'irmÃ£o', 'irmÃ£ozinho', 'meio-irmÃ£o', 'marido', 'esposo', 'namorado', 
      'noivo', 'filho', 'filhinho', 'enteado', 'neto', 'netinho', 'tio', 
      'tiozinho', 'padrinho', 'primo', 'priminho', 'cunhado', 'sogro', 
      'genro', 'bisavÃ´', 'sobrinho', 'afilhado'
    ];
    
    const femininRelationships = [
      'mÃ£e', 'mamÃ£e', 'mÃ£ezinha', 'madrasta', 'vovÃ³', 'avÃ³', 'vovozinha',
      'irmÃ£', 'irmÃ£zinha', 'meia-irmÃ£', 'esposa', 'mulher', 'namorada',
      'noiva', 'filha', 'filhinha', 'enteada', 'neta', 'netinha', 'tia',
      'tiazinha', 'madrinha', 'prima', 'priminha', 'cunhada', 'sogra',
      'nora', 'bisavÃ³', 'sobrinha', 'afilhada'
    ];

    const lowerRelationship = relationship.toLowerCase();
    
    if (masculineRelationships.some(rel => lowerRelationship.includes(rel))) {
      return 'male';
    }
    if (femininRelationships.some(rel => lowerRelationship.includes(rel))) {
      return 'female';
    }
    return 'neutral';
  },

  /**
   * Retorna pronomes baseados no gÃªnero
   */
  getPronouns(gender: 'male' | 'female' | 'neutral') {
    switch (gender) {
      case 'male':
        return {
          subject: 'ele',
          object: 'ele',
          possessive: 'dele',
          article: 'o'
        };
      case 'female':
        return {
          subject: 'ela',
          object: 'ela', 
          possessive: 'dela',
          article: 'a'
        };
      default:
        return {
          subject: 'essa pessoa',
          object: 'essa pessoa',
          possessive: 'dessa pessoa',
          article: 'a'
        };
    }
  }
};